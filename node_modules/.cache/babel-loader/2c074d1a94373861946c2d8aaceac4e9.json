{"ast":null,"code":"var _jsxFileName = \"/Users/seokhwan/Desktop/project/react_exam/src/components/Patient_list.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'personID',\n  label: '환자 id',\n  align: 'center'\n}, {\n  id: 'gender',\n  label: '성별',\n  align: 'center'\n}, {\n  id: 'birthDateTime',\n  label: '생년월일',\n  align: 'center'\n}, {\n  id: 'age',\n  label: '나이',\n  align: 'center'\n}, {\n  id: 'race',\n  label: '인종',\n  align: 'center'\n}, {\n  id: 'ethnicity',\n  label: '민족',\n  align: 'center'\n}, {\n  id: 'isDeath',\n  label: '사망여부',\n  align: 'center'\n}];\n\nconst Patient_list = () => {\n  _s();\n\n  const baseurl = 'http://49.50.167.136:9871/';\n  const [plist, setPlist] = useState([]);\n  const [page, setPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(1);\n  };\n\n  useEffect(() => {\n    axios.get(baseurl + `api/patient/list?page=${page}&order_desc=false`).then(res => {\n      console.log(res.data.patient);\n      setPlist(res.data.patient.list);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  console.log(plist);\n  const patient_list = plist.map((li, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: index <= 5 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: li.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: li.birthDatetime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: li.ethnicity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: li.gender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: li.isDeath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: li.personID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: li.race\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Patient_list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: plist.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((log, index) => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = log[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 33\n                }, this);\n              })\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      className: \"mr-4\",\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: plist.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this), patient_list]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Patient_list, \"4htt4KbIDiRxpCHyWL+hoLAuris=\");\n\n_c = Patient_list;\nexport default Patient_list;\n\nvar _c;\n\n$RefreshReg$(_c, \"Patient_list\");","map":{"version":3,"sources":["/Users/seokhwan/Desktop/project/react_exam/src/components/Patient_list.js"],"names":["axios","React","useEffect","useState","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","columns","id","label","align","Patient_list","baseurl","plist","setPlist","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","get","then","res","console","log","data","patient","list","catch","err","patient_list","map","li","index","age","birthDatetime","ethnicity","gender","isDeath","personID","race","column","slice","format","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,QAAP,MAAqB,4BAArB;;AAEA,MAAMC,OAAO,GAAG,CACZ;AAACC,EAAAA,EAAE,EAAE,UAAL;AAAiBC,EAAAA,KAAK,EAAE,OAAxB;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CADY,EAEZ;AAACF,EAAAA,EAAE,EAAE,QAAL;AAAeC,EAAAA,KAAK,EAAE,IAAtB;AAA4BC,EAAAA,KAAK,EAAE;AAAnC,CAFY,EAGZ;AAACF,EAAAA,EAAE,EAAE,eAAL;AAAsBC,EAAAA,KAAK,EAAE,MAA7B;AAAqCC,EAAAA,KAAK,EAAE;AAA5C,CAHY,EAIZ;AAACF,EAAAA,EAAE,EAAE,KAAL;AAAYC,EAAAA,KAAK,EAAE,IAAnB;AAAyBC,EAAAA,KAAK,EAAE;AAAhC,CAJY,EAKZ;AAACF,EAAAA,EAAE,EAAE,MAAL;AAAaC,EAAAA,KAAK,EAAE,IAApB;AAA0BC,EAAAA,KAAK,EAAE;AAAjC,CALY,EAMZ;AAACF,EAAAA,EAAE,EAAE,WAAL;AAAkBC,EAAAA,KAAK,EAAE,IAAzB;AAA+BC,EAAAA,KAAK,EAAE;AAAtC,CANY,EAOZ;AAACF,EAAAA,EAAE,EAAE,SAAL;AAAgBC,EAAAA,KAAK,EAAE,MAAvB;AAA+BC,EAAAA,KAAK,EAAE;AAAtC,CAPY,CAAhB;;AAWA,MAAMC,YAAY,GAAG,MAAK;AAAA;;AACtB,QAAMC,OAAO,GAAG,4BAAhB;AAEA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBf,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMoB,gBAAgB,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACzCL,IAAAA,OAAO,CAACK,OAAD,CAAP;AACH,GAFD;;AAIA,QAAMC,uBAAuB,GAAIF,KAAD,IAAW;AACvCF,IAAAA,cAAc,CAAC,CAACE,KAAK,CAACG,MAAN,CAAaC,KAAf,CAAd;AACAR,IAAAA,OAAO,CAAC,CAAD,CAAP;AACH,GAHD;;AAKAlB,EAAAA,SAAS,CAAC,MAAI;AACVF,IAAAA,KAAK,CAAC6B,GAAN,CAAUb,OAAO,GAAE,yBAAwBG,IAAK,mBAAhD,EACCW,IADD,CACOC,GAAD,IAAO;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,OAArB;AACAjB,MAAAA,QAAQ,CAACa,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBC,IAAlB,CAAR;AACH,KAJD,EAIGC,KAJH,CAIUC,GAAD,IAAO;AACZN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACH,KAND;AAOH,GARQ,EAQP,EARO,CAAT;AASAN,EAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AAEA,QAAMsB,YAAY,GAAGtB,KAAK,CAACuB,GAAN,CAAU,CAACC,EAAD,EAAIC,KAAJ,kBAC3B;AAAA,cACKA,KAAK,IAAI,CAAT,iBACD;AAAA,8BACI;AAAA,kBAAID,EAAE,CAACE;AAAP;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAIF,EAAE,CAACG;AAAP;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAIH,EAAE,CAACI;AAAP;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAIJ,EAAE,CAACK;AAAP;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,kBAAIL,EAAE,CAACM;AAAP;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,kBAAIN,EAAE,CAACO;AAAP;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA,kBAAIP,EAAE,CAACQ;AAAP;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ,KAAYP,KAAZ;AAAA;AAAA;AAAA;AAAA,UADiB,CAArB;AAcA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AAAA,6BACQ,QAAC,KAAD;AAAO,QAAA,YAAY,MAAnB;AAAoB,sBAAW,cAA/B;AAAA,gCACA,QAAC,SAAD;AAAA,iCACI,QAAC,QAAD;AAAA,sBACC/B,OAAO,CAAC6B,GAAR,CAAaU,MAAD,iBACT,QAAC,SAAD;AAEA,cAAA,KAAK,EAAEA,MAAM,CAACpC,KAFd;AAAA,wBAICoC,MAAM,CAACrC;AAJR,eACKqC,MAAM,CAACtC,EADZ;AAAA;AAAA;AAAA;AAAA,oBADH;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADA,eAaA,QAAC,SAAD;AAAA,oBACKK,KAAK,CAACkC,KAAN,CAAYhC,IAAI,GAAGE,WAAnB,EAAgCF,IAAI,GAAGE,WAAP,GAAqBA,WAArD,EAAkEmB,GAAlE,CAAsE,CAACP,GAAD,EAAMS,KAAN,KAAgB;AACvF,gCACI,QAAC,QAAD;AAAU,cAAA,QAAQ,EAAE,CAAC,CAArB;AAAA,wBACC/B,OAAO,CAAC6B,GAAR,CAAaU,MAAD,IAAY;AACrB,sBAAMtB,KAAK,GAAGK,GAAG,CAACiB,MAAM,CAACtC,EAAR,CAAjB;AACA,oCAEA,QAAC,SAAD;AAA2B,kBAAA,KAAK,EAAEsC,MAAM,CAACpC,KAAzC;AAAA,4BACGoC,MAAM,CAACE,MAAP,IAAiB,OAAOxB,KAAP,KAAiB,QAAlC,GAA6CsB,MAAM,CAACE,MAAP,CAAcxB,KAAd,CAA7C,GAAoEA;AADvE,mBAAgBsB,MAAM,CAACtC,EAAvB;AAAA;AAAA;AAAA;AAAA,wBAFA;AAOH,eATA;AADD,eAA6B8B,KAA7B;AAAA;AAAA;AAAA;AAAA,oBADJ;AAcC,WAfA;AADL;AAAA;AAAA;AAAA;AAAA,gBAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,YAFJ,eAoCQ,QAAC,eAAD;AACI,MAAA,SAAS,EAAC,MADd;AAEI,MAAA,kBAAkB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,CAFxB;AAGI,MAAA,SAAS,EAAC,KAHd;AAII,MAAA,KAAK,EAAEzB,KAAK,CAACoC,MAJjB;AAKI,MAAA,WAAW,EAAEhC,WALjB;AAMI,MAAA,IAAI,EAAEF,IANV;AAOI,MAAA,YAAY,EAAEI,gBAPlB;AAQI,MAAA,mBAAmB,EAAEG;AARzB;AAAA;AAAA;AAAA;AAAA,YApCR,EA8CKa,YA9CL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkDH,CA3FD;;GAAMxB,Y;;KAAAA,Y;AA6FN,eAAeA,YAAf","sourcesContent":["import axios from 'axios';\nimport React, {useEffect, useState} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst columns = [\n    {id: 'personID', label: '환자 id', align: 'center'},\n    {id: 'gender', label: '성별', align: 'center'},\n    {id: 'birthDateTime', label: '생년월일', align: 'center'},\n    {id: 'age', label: '나이', align: 'center'},\n    {id: 'race', label: '인종', align: 'center'},\n    {id: 'ethnicity', label: '민족', align: 'center'},\n    {id: 'isDeath', label: '사망여부', align: 'center'}\n]\n\n\nconst Patient_list = () =>{\n    const baseurl = 'http://49.50.167.136:9871/'\n\n    const [plist,setPlist] = useState([]);\n    const [page, setPage] = useState(1);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    }\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(1);\n    }\n\n    useEffect(()=>{\n        axios.get(baseurl+`api/patient/list?page=${page}&order_desc=false`)\n        .then((res)=>{\n            console.log(res.data.patient)\n            setPlist(res.data.patient.list)\n        }).catch((err)=>{\n            console.log(err)\n        })\n    },[])\n    console.log(plist)\n\n    const patient_list = plist.map((li,index)=>\n        <div key = {index}>\n            {index <= 5 &&\n            <div>\n                <p>{li.age}</p>\n                <p>{li.birthDatetime}</p>\n                <p>{li.ethnicity}</p>\n                <p>{li.gender}</p>\n                <p>{li.isDeath}</p>\n                <p>{li.personID}</p>\n                <p>{li.race}</p>\n            </div>}\n        </div>\n    )\n    return(\n        <div>\n            <p>Patient_list</p>\n            <TableContainer >\n                    <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                        {columns.map((column) => (\n                            <TableCell\n                            key={column.id}\n                            align={column.align}\n                            >\n                            {column.label}\n                            </TableCell>\n                        ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {plist.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((log, index) => {\n                        return (\n                            <TableRow tabIndex={-1} key={index}>\n                            {columns.map((column) => {\n                                const value = log[column.id];\n                                return (\n                                  \n                                <TableCell key={column.id} align={column.align}>\n                                  {column.format && typeof value === 'number' ? column.format(value) : value}\n     \n                                </TableCell>  \n                                );\n                            })}\n                            </TableRow>\n                        );\n                        })}\n                    </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    className=\"mr-4\"\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={plist.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            {patient_list}\n        </div>\n    )\n}\n\nexport default Patient_list"]},"metadata":{},"sourceType":"module"}