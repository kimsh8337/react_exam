{"ast":null,"code":"var _jsxFileName = \"/Users/seokhwan/Desktop/project/react_exam/src/components/Patient_list.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Moment from 'react-moment';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'personID',\n  label: '환자 ID',\n  order: 'person_id',\n  align: 'center'\n}, {\n  id: 'gender',\n  label: '성별',\n  order: 'gender',\n  align: 'center'\n}, {\n  id: 'birthDatetime',\n  label: '생년월일',\n  order: 'birth',\n  align: 'center'\n}, {\n  id: 'age',\n  label: '나이',\n  align: 'center'\n}, {\n  id: 'race',\n  label: '인종',\n  order: 'race',\n  align: 'center'\n}, {\n  id: 'ethnicity',\n  label: '민족',\n  order: 'ethnicity',\n  align: 'center'\n}, {\n  id: 'isDeath',\n  label: '사망여부',\n  order: 'death',\n  align: 'center'\n}];\n\nconst Patient_list = () => {\n  _s();\n\n  const baseurl = 'http://49.50.167.136:9871/';\n  const [plist, setPlist] = useState([]);\n  const [page, setPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [order_column, setOrder_column] = useState('death');\n  const [order_desc, setOrder_desc] = useState(false);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(1);\n  };\n\n  const arrowHandler = e => {\n    if (order_column !== e) {\n      setOrder_column(e);\n      setOrder_desc(true);\n    } else {\n      setOrder_column('death');\n      setOrder_desc(false);\n    }\n  };\n\n  useEffect(() => {\n    axios.get(baseurl + `api/patient/list?page=${page}&order_column=${order_column}&order_desc=${order_desc}`).then(res => {\n      console.log(res.data.patient);\n      setPlist(res.data.patient.list);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [page, order_column, order_desc]); // console.log(plist)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Patient_list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              children: [column.label, column.id !== 'age' ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: order_column === column.order ? /*#__PURE__*/_jsxDEV(ArrowDropUpIcon, {\n                  onClick: () => arrowHandler(column.order)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 69\n                }, this) : /*#__PURE__*/_jsxDEV(ArrowDropDownIcon, {\n                  onClick: () => arrowHandler(column.order)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 130\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 29\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 29\n              }, this)]\n            }, column.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: plist.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((patient, index) => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = patient[column.id];\n                console.log(patient);\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: [column.id !== \"birthDatetime\" && column.id !== \"isDeath\" && value, column.id === \"birthDatetime\" && /*#__PURE__*/_jsxDEV(Moment, {\n                    format: \"YYYY-MM-DD HH:mm\",\n                    children: value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 71\n                  }, this), column.id === \"isDeath\" && value === false && /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"N\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 84\n                  }, this), column.id === \"isDeath\" && value === true && /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Y\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 83\n                  }, this)]\n                }, column.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 33\n                }, this);\n              })\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      className: \"mr-4\",\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: plist.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Patient_list, \"5O24LXhjtVJN5REOSMHVat3gaVA=\");\n\n_c = Patient_list;\nexport default Patient_list;\n\nvar _c;\n\n$RefreshReg$(_c, \"Patient_list\");","map":{"version":3,"sources":["/Users/seokhwan/Desktop/project/react_exam/src/components/Patient_list.js"],"names":["axios","React","useEffect","useState","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Moment","ArrowDropDownIcon","ArrowDropUpIcon","columns","id","label","order","align","Patient_list","baseurl","plist","setPlist","page","setPage","rowsPerPage","setRowsPerPage","order_column","setOrder_column","order_desc","setOrder_desc","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","arrowHandler","e","get","then","res","console","log","data","patient","list","catch","err","map","column","slice","index","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAEA,MAAMC,OAAO,GAAG,CACZ;AAACC,EAAAA,EAAE,EAAE,UAAL;AAAiBC,EAAAA,KAAK,EAAE,OAAxB;AAAiCC,EAAAA,KAAK,EAAC,WAAvC;AAAoDC,EAAAA,KAAK,EAAE;AAA3D,CADY,EAEZ;AAACH,EAAAA,EAAE,EAAE,QAAL;AAAeC,EAAAA,KAAK,EAAE,IAAtB;AAA4BC,EAAAA,KAAK,EAAC,QAAlC;AAA4CC,EAAAA,KAAK,EAAE;AAAnD,CAFY,EAGZ;AAACH,EAAAA,EAAE,EAAE,eAAL;AAAsBC,EAAAA,KAAK,EAAE,MAA7B;AAAqCC,EAAAA,KAAK,EAAC,OAA3C;AAAoDC,EAAAA,KAAK,EAAE;AAA3D,CAHY,EAIZ;AAACH,EAAAA,EAAE,EAAE,KAAL;AAAYC,EAAAA,KAAK,EAAE,IAAnB;AAAyBE,EAAAA,KAAK,EAAE;AAAhC,CAJY,EAKZ;AAACH,EAAAA,EAAE,EAAE,MAAL;AAAaC,EAAAA,KAAK,EAAE,IAApB;AAA0BC,EAAAA,KAAK,EAAC,MAAhC;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CALY,EAMZ;AAACH,EAAAA,EAAE,EAAE,WAAL;AAAkBC,EAAAA,KAAK,EAAE,IAAzB;AAA+BC,EAAAA,KAAK,EAAC,WAArC;AAAkDC,EAAAA,KAAK,EAAE;AAAzD,CANY,EAOZ;AAACH,EAAAA,EAAE,EAAE,SAAL;AAAgBC,EAAAA,KAAK,EAAE,MAAvB;AAA+BC,EAAAA,KAAK,EAAC,OAArC;AAA8CC,EAAAA,KAAK,EAAE;AAArD,CAPY,CAAhB;;AAWA,MAAMC,YAAY,GAAG,MAAK;AAAA;;AACtB,QAAMC,OAAO,GAAG,4BAAhB;AAEA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBnB,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACwB,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,OAAD,CAAhD;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAM4B,gBAAgB,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACzCT,IAAAA,OAAO,CAACS,OAAD,CAAP;AACH,GAFD;;AAIA,QAAMC,uBAAuB,GAAIF,KAAD,IAAW;AACvCN,IAAAA,cAAc,CAAC,CAACM,KAAK,CAACG,MAAN,CAAaC,KAAf,CAAd;AACAZ,IAAAA,OAAO,CAAC,CAAD,CAAP;AACH,GAHD;;AAKA,QAAMa,YAAY,GAAKC,CAAD,IAAK;AACvB,QAAIX,YAAY,KAAKW,CAArB,EAAwB;AACpBV,MAAAA,eAAe,CAACU,CAAD,CAAf;AACAR,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAHD,MAGO;AACHF,MAAAA,eAAe,CAAC,OAAD,CAAf;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GARD;;AAUA5B,EAAAA,SAAS,CAAC,MAAI;AACVF,IAAAA,KAAK,CAACuC,GAAN,CAAUnB,OAAO,GAAE,yBAAwBG,IAAK,iBAAgBI,YAAa,eAAcE,UAAW,EAAtG,EACCW,IADD,CACOC,GAAD,IAAO;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,OAArB;AACAvB,MAAAA,QAAQ,CAACmB,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBC,IAAlB,CAAR;AACH,KAJD,EAIGC,KAJH,CAIUC,GAAD,IAAO;AACZN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACH,KAND;AAOH,GARQ,EAQP,CAACzB,IAAD,EAAMI,YAAN,EAAmBE,UAAnB,CARO,CAAT,CA5BsB,CAqCtB;;AAGA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,cAAD;AAAA,6BACQ,QAAC,KAAD;AAAO,QAAA,YAAY,MAAnB;AAAoB,sBAAW,cAA/B;AAAA,gCACA,QAAC,SAAD;AAAA,iCACI,QAAC,QAAD;AAAA,sBACCf,OAAO,CAACmC,GAAR,CAAaC,MAAD,iBACT,QAAC,SAAD;AAEA,cAAA,KAAK,EAAEA,MAAM,CAAChC,KAFd;AAAA,yBAICgC,MAAM,CAAClC,KAJR,EAKCkC,MAAM,CAACnC,EAAP,KAAc,KAAd,gBACD;AAAA,0BAAOY,YAAY,KAAKuB,MAAM,CAACjC,KAAxB,gBAAiC,QAAC,eAAD;AAAiB,kBAAA,OAAO,EAAE,MAAIoB,YAAY,CAACa,MAAM,CAACjC,KAAR;AAA1C;AAAA;AAAA;AAAA;AAAA,wBAAjC,gBAA8F,QAAC,iBAAD;AAAmB,kBAAA,OAAO,EAAE,MAAIoB,YAAY,CAACa,MAAM,CAACjC,KAAR;AAA5C;AAAA;AAAA;AAAA;AAAA;AAArG;AAAA;AAAA;AAAA;AAAA,sBADC,gBAED;AAAA;AAAA;AAAA;AAAA,sBAPA;AAAA,eACKiC,MAAM,CAACnC,EADZ;AAAA;AAAA;AAAA;AAAA,oBADH;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADA,eAgBA,QAAC,SAAD;AAAA,oBACKM,KAAK,CAAC8B,KAAN,CAAY5B,IAAI,GAAGE,WAAnB,EAAgCF,IAAI,GAAGE,WAAP,GAAqBA,WAArD,EAAkEwB,GAAlE,CAAsE,CAACJ,OAAD,EAAUO,KAAV,KAAoB;AAE3F,gCACI,QAAC,QAAD;AAAU,cAAA,KAAK,MAAf;AAAgB,cAAA,QAAQ,EAAE,CAAC,CAA3B;AAAA,wBACCtC,OAAO,CAACmC,GAAR,CAAaC,MAAD,IAAY;AACrB,sBAAMd,KAAK,GAAGS,OAAO,CAACK,MAAM,CAACnC,EAAR,CAArB;AACA2B,gBAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACA,oCAEA,QAAC,SAAD;AAA2B,kBAAA,KAAK,EAAEK,MAAM,CAAChC,KAAzC;AAAA,6BAGKgC,MAAM,CAACnC,EAAP,KAAc,eAAd,IAAiCmC,MAAM,CAACnC,EAAP,KAAc,SAA/C,IAA4DqB,KAHjE,EAIKc,MAAM,CAACnC,EAAP,KAAc,eAAd,iBAAiC,QAAC,MAAD;AAAQ,oBAAA,MAAM,EAAC,kBAAf;AAAA,8BAAmCqB;AAAnC;AAAA;AAAA;AAAA;AAAA,0BAJtC,EAKKc,MAAM,CAACnC,EAAP,KAAc,SAAd,IAA2BqB,KAAK,KAAK,KAArC,iBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BALnD,EAMKc,MAAM,CAACnC,EAAP,KAAc,SAAd,IAA2BqB,KAAK,KAAK,IAArC,iBAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANlD;AAAA,mBAAgBc,MAAM,CAACnC,EAAvB;AAAA;AAAA;AAAA;AAAA,wBAFA;AAWH,eAdA;AADD,eAAmCqC,KAAnC;AAAA;AAAA;AAAA;AAAA,oBADJ;AAmBC,WArBA;AADL;AAAA;AAAA;AAAA;AAAA,gBAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,YAFJ,eA6CQ,QAAC,eAAD;AACI,MAAA,SAAS,EAAC,MADd;AAEI,MAAA,kBAAkB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,CAFxB;AAGI,MAAA,SAAS,EAAC,KAHd;AAII,MAAA,KAAK,EAAE/B,KAAK,CAACgC,MAJjB;AAKI,MAAA,WAAW,EAAE5B,WALjB;AAMI,MAAA,IAAI,EAAEF,IANV;AAOI,MAAA,YAAY,EAAEQ,gBAPlB;AAQI,MAAA,mBAAmB,EAAEG;AARzB;AAAA;AAAA;AAAA;AAAA,YA7CR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0DH,CAlGD;;GAAMf,Y;;KAAAA,Y;AAoGN,eAAeA,YAAf","sourcesContent":["import axios from 'axios';\nimport React, {useEffect, useState} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Moment from 'react-moment'\n\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\n\nconst columns = [\n    {id: 'personID', label: '환자 ID', order:'person_id', align: 'center'},\n    {id: 'gender', label: '성별', order:'gender', align: 'center'},\n    {id: 'birthDatetime', label: '생년월일', order:'birth', align: 'center'},\n    {id: 'age', label: '나이', align: 'center'},\n    {id: 'race', label: '인종', order:'race', align: 'center'},\n    {id: 'ethnicity', label: '민족', order:'ethnicity', align: 'center'},\n    {id: 'isDeath', label: '사망여부', order:'death', align: 'center'}\n]\n\n\nconst Patient_list = () =>{\n    const baseurl = 'http://49.50.167.136:9871/'\n\n    const [plist,setPlist] = useState([]);\n    const [page, setPage] = useState(1);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [order_column, setOrder_column] = useState('death');\n    const [order_desc, setOrder_desc] = useState(false)\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    }\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(1);\n    }\n\n    const arrowHandler = ((e)=>{\n        if (order_column !== e) {\n            setOrder_column(e)\n            setOrder_desc(true)\n        } else {\n            setOrder_column('death')\n            setOrder_desc(false)\n        }\n    })\n\n    useEffect(()=>{\n        axios.get(baseurl+`api/patient/list?page=${page}&order_column=${order_column}&order_desc=${order_desc}`)\n        .then((res)=>{\n            console.log(res.data.patient)\n            setPlist(res.data.patient.list)\n        }).catch((err)=>{\n            console.log(err)\n        })\n    },[page,order_column,order_desc])\n    // console.log(plist)\n\n\n    return(\n        <div>\n            <p>Patient_list</p>\n            <TableContainer >\n                    <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                        {columns.map((column) => (\n                            <TableCell\n                            key={column.id}\n                            align={column.align}\n                            >\n                            {column.label}\n                            {column.id !== 'age' ?\n                            <span>{order_column === column.order ?  <ArrowDropUpIcon onClick={()=>arrowHandler(column.order)}/> :<ArrowDropDownIcon onClick={()=>arrowHandler(column.order)}/>}</span> :\n                            <span></span>}\n                            </TableCell>\n                        ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {plist.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((patient, index) => {\n                    \n                        return (\n                            <TableRow hover tabIndex={-1} key={index}>\n                            {columns.map((column) => {\n                                const value = patient[column.id];\n                                console.log(patient)\n                                return (\n                                  \n                                <TableCell key={column.id} align={column.align}>\n\n                                  {/* {column.format && typeof value === 'number' ? column.format(value) : value} */}\n                                    {column.id !== \"birthDatetime\" && column.id !== \"isDeath\" && value}\n                                    {column.id === \"birthDatetime\" && <Moment format=\"YYYY-MM-DD HH:mm\">{value}</Moment>}\n                                    {column.id === \"isDeath\" && value === false && <span>N</span>}\n                                    {column.id === \"isDeath\" && value === true && <span>Y</span>}\n                                </TableCell>  \n                                );\n                            })}\n                            </TableRow>\n                        );\n                        })}\n                    </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    className=\"mr-4\"\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={plist.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n        </div>\n    )\n}\n\nexport default Patient_list"]},"metadata":{},"sourceType":"module"}